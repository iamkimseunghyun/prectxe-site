datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ProjectCategory {
  exhibition
  performance
  festival
  workshop
}

enum EventStatus {
  upcoming
  ongoing
  completed
  cancelled
}

enum EventType {
  exhibition
  performance
  festival
  workshop
  talk
  screening
  other
}

enum Role {
  ADMIN
  USER
}

model User {
  id       String    @id @default(cuid())
  username String?   @unique
  email    String?   @unique
  password String?
  role     Role?     @default(USER)
  posts    Post[]
  projects Project[]
  events   Event[]
  artists  Artist[]
  artworks Artwork[]
  venues   Venue[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Post {
  id        String    @id @default(cuid())
  title     String?
  content   String?
  published Boolean?  @default(false)
  author    User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Project {
  id              String           @id @default(cuid())
  title           String
  about           String
  description     String
  year            Int
  startDate       DateTime
  endDate         DateTime
  category        ProjectCategory
  mainImageUrl    String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  images          ProjectImage[]
  projectArtists  ProjectArtist[]
  projectArtworks ProjectArtwork[]
  venues          ProjectVenue[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model ProjectImage {
  id        String  @id @default(cuid())
  imageUrl  String
  alt       String
  order     Int     @default(0)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String      @id @default(cuid())
  title       String
  subtitle    String?
  description String      @db.Text
  status      EventStatus @default(upcoming)
  type        EventType
  startDate   DateTime
  endDate     DateTime
  // 사용자
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  // 이벤트 이미지
  mainImageUrl String
  images       EventImage[]

  // 이벤트 장소
  venue   Venue?  @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId String?

  // 이벤트 주최자/아티스트
  organizers EventOrganizer[]

  // 티켓/예약 정보
  tickets EventTicket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventImage {
  id       String @id @default(cuid())
  imageUrl String
  alt      String
  order    Int    @default(0)
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventOrganizer {
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  String
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String
  role     String // ex: "주최자", "큐레이터", "퍼포머" 등

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([eventId, artistId])
}

model EventTicket {
  id       String @id @default(cuid())
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  String
  name     String // ex: "일반 입장권", "VIP 티켓" 등
  price    Int
  quantity Int // 남은 수량

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Artist {
  id              String           @id @default(cuid())
  name            String           @map("name_en")
  nameKr          String           @map("name_kr")
  mainImageUrl    String?
  email           String?
  city            String?
  country         String?
  homepage        String?
  biography       String?
  cv              String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  images          ArtistImage[]
  artistArtworks  ArtistArtwork[]
  projectArtists  ProjectArtist[]
  eventOrganizers EventOrganizer[]
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
}

model ArtistImage {
  id       String @id @default(cuid())
  imageUrl String
  alt      String
  order    Int    @default(0)
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Artwork {
  id              String           @id @default(cuid())
  title           String
  size            String?
  media           String?
  year            Int?
  description     String?
  style           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  images          ArtworkImage[]
  artists         ArtistArtwork[]
  projectArtWorks ProjectArtwork[]
  user            User             @relation(fields: [userId], references: [id])
  userId          String
}

model ArtworkImage {
  id        String  @id @default(cuid())
  imageUrl  String
  alt       String
  order     Int     @default(0)
  artwork   Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  artworkId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Venue {
  id           String         @id @default(cuid())
  name         String
  description  String
  address      String
  images       VenueImage[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  projectVenue ProjectVenue[]
  Event        Event[]
  user         User           @relation(fields: [userId], references: [id])
  userId       String
}

model VenueImage {
  id       String @id @default(cuid())
  imageUrl String
  alt      String
  order    Int    @default(0)
  venue    Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectArtist {
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  artist    Artist  @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([projectId, artistId])
}

model ProjectArtwork {
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  artworkId String
  artwork   Artwork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([artworkId, projectId])
}

model ProjectVenue {
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId String

  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([projectId, venueId])
}

model ArtistArtwork {
  artist    Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId  String
  artwork   Artwork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  artworkId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([artistId, artworkId])
}
